/**
 * ChangeSubjectGUI.java
 *
 * GUI panel that allows students to request a subject change or addition.
 * Students can:
 * - View current enrolled subjects
 * - Select a subject to replace or add
 * - Submit a request with a reason
 * - View and cancel pending requests
 *
 * Core Functionalities:
 * - Submit subject change requests via StudentService
 * - Prevent duplicate or invalid requests
 * - Display list of current pending requests
 *
 * Used in:
 * - StudentGUI â†’ changeSubjectButtonActionPerformed
 *
 * Depends on:
 * - DataModel: Student, Subject, Enrollment, StudentRequest
 * - Service: StudentService
 * - Utility: DataManager
 */

package UserInterface.Student;

import DataModel.Student;
import DataModel.Subject;
import DataModel.StudentRequest;
import DataModel.Enrollment;
import Util.DataManager;
import Service.StudentService;
import javax.swing.*;
import java.util.List;
import java.awt.Dimension;
import java.awt.GridBagLayout; 
import java.awt.GridBagConstraints; 
import java.awt.Insets; 
import java.awt.event.ActionEvent; 
import java.awt.event.ActionListener; 
import javax.swing.event.DocumentEvent; 
import javax.swing.event.DocumentListener; 

public class ChangeSubjectGUI extends javax.swing.JPanel {

    // --- Class-level fields ---
    private Student loggedInStudent;
    private StudentService studentService;
    private DataManager<Subject> subjectManager;
    private DataManager<Enrollment> enrollmentManager;
    private DataManager<StudentRequest> studentRequestManager; 
    
    // Lists to hold data for populating combo boxes
    private List<Subject> allSubjects;
    private List<Subject> enrolledSubjects;
    
    
    // Field for unsaved changes detection
    private boolean hasUnsavedChanges = false;

    /**
    * Default constructor. Used by GUI builder or if no student is logged in.
    * Initializes services and data managers.
    */
    public ChangeSubjectGUI() {
        initComponents();
        studentService = new StudentService();
        subjectManager = DataManager.of(Subject.class);
        enrollmentManager = DataManager.of(Enrollment.class);
        studentRequestManager = DataManager.of(StudentRequest.class);
    }

    /**
    * Overloaded constructor that accepts the currently logged-in student.
    * Populates combo boxes and adds change listeners to form components.
    *
    * @param student The logged-in student object
    */
    public ChangeSubjectGUI(Student student) {
        this(); // Call the no-arg constructor to initialize components
        this.loggedInStudent = student;
        populateComboBoxes(); 
        addListenersForUnsavedChanges(); 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        viewRequest = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        selectNewSubjectLabel = new javax.swing.JLabel();
        subjectLabel = new javax.swing.JLabel();
        chooseNewSubject = new javax.swing.JComboBox<>();
        reasonLabel = new javax.swing.JLabel();
        backHomeButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reasonTextArea = new javax.swing.JTextArea();
        availableSubject = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(235, 245, 238));
        setForeground(new java.awt.Color(255, 255, 204));

        jPanel1.setBackground(new java.awt.Color(45, 118, 232));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/book-stack.png"))); // NOI18N
        jLabel1.setText("Subject Change Request Form");

        jPanel2.setBackground(new java.awt.Color(235, 245, 238));
        jPanel2.setForeground(new java.awt.Color(255, 255, 204));

        viewRequest.setBackground(new java.awt.Color(0, 0, 0));
        viewRequest.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewRequest.setForeground(new java.awt.Color(235, 245, 238));
        viewRequest.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        viewRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewRequestMouseClicked(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(235, 245, 238));

        selectNewSubjectLabel.setBackground(new java.awt.Color(255, 255, 204));
        selectNewSubjectLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        selectNewSubjectLabel.setForeground(new java.awt.Color(0, 0, 0));
        selectNewSubjectLabel.setText("Select New Subject:");

        subjectLabel.setBackground(new java.awt.Color(255, 255, 204));
        subjectLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        subjectLabel.setForeground(new java.awt.Color(0, 0, 0));
        subjectLabel.setText("Choose Subject To Replace:");

        chooseNewSubject.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        chooseNewSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseNewSubjectActionPerformed(evt);
            }
        });

        reasonLabel.setBackground(new java.awt.Color(255, 255, 204));
        reasonLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        reasonLabel.setForeground(new java.awt.Color(0, 0, 0));
        reasonLabel.setText("Reason:");

        backHomeButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backHomeButton.setForeground(new java.awt.Color(0, 0, 0));
        backHomeButton.setText("Back");
        backHomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backHomeButtonActionPerformed(evt);
            }
        });

        doneButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        doneButton.setForeground(new java.awt.Color(0, 0, 0));
        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        reasonTextArea.setColumns(20);
        reasonTextArea.setRows(5);
        jScrollPane1.setViewportView(reasonTextArea);

        availableSubject.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        availableSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableSubjectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(backHomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(doneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(selectNewSubjectLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chooseNewSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(subjectLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(availableSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(reasonLabel)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectLabel)
                    .addComponent(availableSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectNewSubjectLabel)
                    .addComponent(chooseNewSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(reasonLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backHomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(122, 122, 122))))
        );

        viewRequest.addTab("Subject Change Form", jPanel3);

        jPanel5.setBackground(new java.awt.Color(235, 245, 238));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 624, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel5);

        viewRequest.addTab("View Requests", jScrollPane2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewRequest, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(viewRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Adds listeners to form fields to detect unsaved changes.
    * Alerts users before navigating away without saving.
    */
    private void addListenersForUnsavedChanges() {
        // DocumentListener for JTextArea
        reasonTextArea.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                hasUnsavedChanges = true;
            }
            public void removeUpdate(DocumentEvent e) {
                hasUnsavedChanges = true;
            }
            public void changedUpdate(DocumentEvent e) {
                hasUnsavedChanges = true;
            }
        });

        // ActionListener for JComboBoxes
        ActionListener comboBoxListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Ignore initial selection events that happen during population
                // (e.g., if you call setSelectedIndex(0) in populateComboBoxes)
                // This can be tricky; a common workaround is to remove/add listeners,
                // or check if the event source is adjusting (not always available for JComboBox).
                // For simplicity, we'll just set it true for any selection change.
                if (e.getSource() instanceof JComboBox) {
                    JComboBox<?> source = (JComboBox<?>) e.getSource();
                    // Avoid setting 'true' if the selected item is the initial prompt
                    // AND it's the very first item selected (i.e., not a user change from another item)
                    if (source.getSelectedIndex() != -1 && !source.getSelectedItem().equals("Select New Subject") && !source.getSelectedItem().equals("No subjects enrolled")) {
                        hasUnsavedChanges = true;
                    } else if (source.getSelectedItem().equals("None (Add New Subject)")) {
                        hasUnsavedChanges = true;
                    }
                }
            }
        };

        availableSubject.addActionListener(comboBoxListener);
        chooseNewSubject.addActionListener(comboBoxListener);
    }
    
    private void availableSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableSubjectActionPerformed
        String selectedOldSubjectName = (String) availableSubject.getSelectedItem();
        // Call the helper to update the "Select New Subject" dropdown based on this choice
        updateNewSubjectComboBoxOptions(selectedOldSubjectName);
    }//GEN-LAST:event_availableSubjectActionPerformed

    /**
    * Called when "Done" button is clicked. Validates form and submits a subject change request.
    *
    * @param evt The ActionEvent triggered by doneButton
    */
    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        String oldSubjectName = (String) availableSubject.getSelectedItem(); // Get from "Choose Subject To Replace"
        String newSubjectName = (String) chooseNewSubject.getSelectedItem();    // Get from "Select New Subject"
        String reason = reasonTextArea.getText();

        // --- Input Validations ---
        if (oldSubjectName == null || oldSubjectName.equals("No subjects enrolled")) {
            JOptionPane.showMessageDialog(this, "Please select a subject to drop or 'None (Add New Subject)'.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (newSubjectName == null || newSubjectName.equals("Select New Subject") || newSubjectName.equals("No new subjects available")) {
            JOptionPane.showMessageDialog(this, "Please select a valid new subject to enroll in.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Prevent replacing a subject with itself unless oldSubjectName is "None"
        if (!"None (Add New Subject)".equals(oldSubjectName) && oldSubjectName.equals(newSubjectName)) {
            JOptionPane.showMessageDialog(this, "Cannot replace a subject with itself. Please choose a different subject.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (reason.trim().isEmpty()) { // Use .trim() to account for just whitespace
            JOptionPane.showMessageDialog(this, "Please provide a reason for the subject change.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // --- End Input Validations ---

        // Convert subject names to IDs for the hasPendingSubjectChangeRequest check
        String oldSubjectIdForCheck = null;
        if ("None (Add New Subject)".equals(oldSubjectName)) {
            oldSubjectIdForCheck = "None"; // Use "None" as placeholder ID for adding new
        } else {
            // Find ID for the actual old subject name
            for (Subject sub : enrolledSubjects) { // Assuming enrolledSubjects is up-to-date
                if (sub.getSubjectName().equalsIgnoreCase(oldSubjectName)) {
                    oldSubjectIdForCheck = sub.getId();
                    break;
                }
            }
        }

        String newSubjectIdForCheck = null;
        for (Subject sub : allSubjects) { // Assuming allSubjects is up-to-date
            if (sub.getSubjectName().equalsIgnoreCase(newSubjectName)) {
                newSubjectIdForCheck = sub.getId();
                break;
            }
        }

        if (oldSubjectIdForCheck == null || newSubjectIdForCheck == null) {
            JOptionPane.showMessageDialog(this, "Internal error: Could not find subject IDs for validation. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Use StudentService to check for duplicate pending requests
        if (studentService.hasPendingSubjectChangeRequest(loggedInStudent.getId(), oldSubjectIdForCheck, newSubjectIdForCheck)) {
            JOptionPane.showMessageDialog(this, "You already have a pending request for this exact subject change.", "Duplicate Request", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Submit the request using StudentService
        boolean success = studentService.submitSubjectChangeRequest(loggedInStudent, oldSubjectName, newSubjectName, reason);

        if (success) {
            JOptionPane.showMessageDialog(this, "Subject change request submitted successfully! Pending approval.", "Success", JOptionPane.INFORMATION_MESSAGE);
            reasonTextArea.setText("");
            hasUnsavedChanges = false; 
            populateComboBoxes(); 
            chooseNewSubject.setSelectedIndex(0); 
            availableSubject.setSelectedIndex(0); 
        } else {
            JOptionPane.showMessageDialog(this, "Failed to submit request. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_doneButtonActionPerformed

    /**
    * Called when "Back" button is clicked. Prompts the user if unsaved changes exist
    * and navigates back to the StudentGUI dashboard.
    *
    * @param evt The ActionEvent triggered by backHomeButton
    */
    private void backHomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backHomeButtonActionPerformed
        if (hasUnsavedChanges) { 
            int response = JOptionPane.showConfirmDialog(this,
                    "You have unsaved changes. Do you want to discard them and go back?",
                    "Unsaved Changes",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
                return; // User chose not to discard, stay on the current screen
            }
        }

        // Navigate back to StudentGUI, preserving the location
        JFrame currentFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (currentFrame != null) {
            currentFrame.dispose(); // Close the current ChangeSubjectGUI frame

            // Open the StudentGUI for the logged-in student at the stored location
            // Pass loggedinStudentObject
            StudentGUI studentDashboard = new StudentGUI(loggedInStudent);
            studentDashboard.setVisible(true);
        }
    }//GEN-LAST:event_backHomeButtonActionPerformed

    private void chooseNewSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseNewSubjectActionPerformed

    }//GEN-LAST:event_chooseNewSubjectActionPerformed

    /**
    * Called when the user clicks the "View Requests" tab.
    * Populates jPanel5 with the logged-in student's pending subject change requests.
    *
    * @param evt The MouseEvent triggered by clicking the tab
    */
    private void viewRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewRequestMouseClicked
         // Check if the clicked tab is the "View Requests" tab
        int selectedIndex = viewRequest.getSelectedIndex();
        // Use indexOfTab for robustness, as tab order might change
        if (selectedIndex != -1 && viewRequest.getTitleAt(selectedIndex).equals("View Requests")) {
            populatePendingRequestsPanel(); // Call the method to populate the panel
        }
    }//GEN-LAST:event_viewRequestMouseClicked

    /**
    * Populates subject drop-downs with valid options based on enrollment.
    * Ensures "None" option appears if student has less than 3 subjects.
    */
    private void populateComboBoxes() {
        // Ensure class-level lists are initialized/updated by fetching fresh data
        this.enrolledSubjects = studentService.getEnrolledSubjects(loggedInStudent.getId());
        this.allSubjects = subjectManager.readFromFile();

        // --- Populate the "Choose Subject To Replace" combo box (availableSubject) ---
        DefaultComboBoxModel<String> subjectToReplaceModel = new DefaultComboBoxModel<>();

        // Add "None (Add New Subject)" as the first option if the student has less than 3 subjects
        // (assuming a maximum of 3 subjects per enrollment slot).
        if (enrolledSubjects.size() < 3) {
            subjectToReplaceModel.addElement("None (Add New Subject)");
        }

        if (enrolledSubjects.isEmpty()) {
            subjectToReplaceModel.addElement("No subjects enrolled");
        } else {
            for (Subject subject : enrolledSubjects) {
                subjectToReplaceModel.addElement(subject.getSubjectName());
            }
        }
        availableSubject.setModel(subjectToReplaceModel);


        // --- Populate the "Select New Subject" combo box (chooseNewSubject) ---
        // This part will be dynamically updated by updateNewSubjectComboBoxOptions().
        // Call the helper for initial population based on the default selected item
        // of 'availableSubject' (which will be the first item, either "None" or a subject).
        updateNewSubjectComboBoxOptions((String) availableSubject.getSelectedItem());
        
        // Reset hasUnsavedChanges after initial population to reflect a "clean" state
        hasUnsavedChanges = false;
    }
    
    /**
    * Updates the "Select New Subject" combo box to exclude subjects already enrolled in
    * and the subject being replaced (if any).
    *
    * @param subjectToExcludeName Name of the subject being dropped (to be excluded)
    */
    private void updateNewSubjectComboBoxOptions(String subjectToExcludeName) {
        DefaultComboBoxModel<String> availableNewSubjectsModel = new DefaultComboBoxModel<>();
        availableNewSubjectsModel.addElement("Select New Subject"); // Always start with a prompt

        if (allSubjects == null || allSubjects.isEmpty()) {
            availableNewSubjectsModel.addElement("No subjects available");
        } else {
            for (Subject subject : allSubjects) {
                // Rule 1: Do not add the subject that is being replaced (if any)
                if (subjectToExcludeName != null &&
                    !"None (Add New Subject)".equals(subjectToExcludeName) &&
                    subject.getSubjectName().equalsIgnoreCase(subjectToExcludeName)) {
                    continue;
                }

                // Rule 2: Do not add subjects the student is ALREADY enrolled in
                boolean alreadyEnrolled = false;
                if (enrolledSubjects != null) {
                    for (Subject enrolled : enrolledSubjects) {
                        if (enrolled.getId().equalsIgnoreCase(subject.getId())) {
                            alreadyEnrolled = true;
                            break;
                        }
                    }
                }
                if (!alreadyEnrolled) {
                    availableNewSubjectsModel.addElement(subject.getSubjectName());
                }
            }
        }
        chooseNewSubject.setModel(availableNewSubjectsModel);
    }
    
    /**
     * Populates jPanel5 with the logged-in student's pending subject change requests.
     */
    private void populatePendingRequestsPanel() {
        // Clear previous components from jPanel5
        jPanel5.removeAll();
        // Set layout for jPanel5 to stack requests vertically
        jPanel5.setLayout(new BoxLayout(jPanel5, BoxLayout.Y_AXIS));

        // Fetch all student requests
        List<StudentRequest> allRequests = studentRequestManager.readFromFile();
        boolean hasPendingRequests = false;

        if (allRequests != null) {
            for (StudentRequest request : allRequests) {
                // Filter for pending requests by the current logged-in student
                if (request.getStudentId().equals(loggedInStudent.getId()) &&
                    request.getStatus().equalsIgnoreCase("Pending")) {
                    
                    hasPendingRequests = true;
                    // Get subject names from IDs
                    String oldSubjectName = studentService.getSubjectNameById(request.getOldSubjectId());
                    String newSubjectName = studentService.getSubjectNameById(request.getNewSubjectId());
                    
                    // Create and add a panel for each request
                    JPanel requestPanel = createRequestPanel(request, oldSubjectName, newSubjectName);
                    jPanel5.add(requestPanel);
                    // Add some vertical space between panels
                    jPanel5.add(Box.createVerticalStrut(10)); 
                }
            }
        }

        if (!hasPendingRequests) {
            JLabel noRequestsLabel = new JLabel("No pending subject change requests.");
            noRequestsLabel.setHorizontalAlignment(SwingConstants.CENTER);
            jPanel5.add(noRequestsLabel);
        }
        
        // Revalidate and repaint to ensure components are displayed correctly
        jPanel5.revalidate();
        jPanel5.repaint();
    }

    /**
    * Creates a styled JPanel for displaying a subject change request.
    * Includes a Cancel button to remove the pending request.
    *
    * @param request         The StudentRequest data object
    * @param oldSubjectName  Display name of the old subject
    * @param newSubjectName  Display name of the new subject
    * @return                JPanel component containing request info
    */
   private JPanel createRequestPanel(StudentRequest request, String oldSubjectName, String newSubjectName) {
    JPanel panel = new JPanel(new GridBagLayout());
    panel.setBorder(BorderFactory.createLineBorder(java.awt.Color.GRAY));
    panel.setPreferredSize(new Dimension(550, 160)); 
    panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 160)); 
    // -------------------------------------------------------------------------------------------------
    
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5); // Padding

    // Old Subject
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    panel.add(createStyledLabel("Old Subject:", 100), gbc);
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.weightx = 1.0; 
    panel.add(createStyledLabel(oldSubjectName, 200), gbc);

    // New Subject
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 0;
    panel.add(createStyledLabel("New Subject:", 100), gbc);
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.weightx = 1.0; 
    panel.add(createStyledLabel(newSubjectName, 200), gbc);

    // Reason
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.weightx = 0; // Reset weight
    gbc.anchor = GridBagConstraints.NORTHWEST; 
    panel.add(createStyledLabel("Reason:", 100), gbc);

    gbc.gridx = 1;
    gbc.gridy = 2;
    gbc.weightx = 1.0; 
    gbc.weighty = 1.0; 
    gbc.fill = GridBagConstraints.BOTH; 
    // -----------------------------------------------------------

    JTextArea reasonDisplay = new JTextArea(request.getReason());
    reasonDisplay.setWrapStyleWord(true);
    reasonDisplay.setLineWrap(true);
    reasonDisplay.setEditable(false);
    reasonDisplay.setBackground(panel.getBackground()); // Match panel background
    reasonDisplay.setFont(new java.awt.Font("Segoe UI", 0, 12));
    
    JScrollPane scrollPane = new JScrollPane(reasonDisplay);
    scrollPane.setPreferredSize(new Dimension(200, 60)); 
    scrollPane.setBorder(null); 
    panel.add(scrollPane, gbc);

    // Reset weights for subsequent components if any
    gbc.weighty = 0;
    gbc.fill = GridBagConstraints.NONE;

    // Cancel Button
    JButton cancelButton = new JButton("Cancel");
    gbc.gridx = 2; 
    gbc.gridy = 0; 
    gbc.gridheight = 3; 
    gbc.anchor = GridBagConstraints.EAST; 
    gbc.fill = GridBagConstraints.NONE; 
    gbc.weightx = 0; 
    panel.add(cancelButton, gbc);

    // Add action listener to the cancel button
    cancelButton.addActionListener((ActionEvent e) -> {
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to cancel this request?",
            "Confirm Cancellation",
            JOptionPane.YES_NO_OPTION
        );
        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = studentService.cancelStudentRequest(request.getId());
            if (success) {
                JOptionPane.showMessageDialog(this, "Request cancelled successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                populatePendingRequestsPanel(); // Refresh the list
            } else {
                JOptionPane.showMessageDialog(this, "Failed to cancel request.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    return panel;
}
    
   /**
    * Creates a styled JLabel with a specific preferred width.
    *
    * @param text            The label text
    * @param preferredWidth  The preferred width of the label in pixels
    * @return                JLabel with HTML-styled width
    */
    private JLabel createStyledLabel(String text, int preferredWidth) {
        JLabel label = new JLabel("<html><body style='width: " + preferredWidth + "px;'>" + text + "</body></html>");
        label.setFont(new java.awt.Font("Segoe UI", 0, 12));
        label.setPreferredSize(new Dimension(preferredWidth, 30)); 
        label.setVerticalAlignment(SwingConstants.TOP); 
        return label;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> availableSubject;
    private javax.swing.JButton backHomeButton;
    private javax.swing.JComboBox<String> chooseNewSubject;
    private javax.swing.JButton doneButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel reasonLabel;
    private javax.swing.JTextArea reasonTextArea;
    private javax.swing.JLabel selectNewSubjectLabel;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JTabbedPane viewRequest;
    // End of variables declaration//GEN-END:variables
}

